# Get the updated label_data
label_data <- data
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id - 0.5) / number_of_bar
label_data$hjust <- ifelse(angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle + 180, angle)
# Update the plot
p <- ggplot(data, aes(x = as.factor(id), y = Frequency, fill = Nationality)) +
geom_bar(aes(x = as.factor(id), y = Frequency, fill = Nationality), stat = "identity", alpha = 0.5) +
# Add grid lines
geom_segment(data = grid_data, aes(x = end, y = 80, xend = start, yend = 80), colour = "grey", alpha = 1, size = 0.3, inherit.aes = FALSE) +
geom_segment(data = grid_data, aes(x = end, y = 60, xend = start, yend = 60), colour = "grey", alpha = 1, size = 0.3, inherit.aes = FALSE) +
geom_segment(data = grid_data, aes(x = end, y = 40, xend = start, yend = 40), colour = "grey", alpha = 1, size = 0.3, inherit.aes = FALSE) +
geom_segment(data = grid_data, aes(x = end, y = 20, xend = start, yend = 20), colour = "grey", alpha = 1, size = 0.3, inherit.aes = FALSE) +
# Annotate values
annotate("text", x = rep(max(data$id), 4), y = c(20, 40, 60, 80), label = c("20", "40", "60", "80"), color = "grey", size = 3, angle = 0, fontface = "bold", hjust = 1) +
ylim(-100, 120) +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1, 4), "cm")
) +
coord_polar() +
geom_text(data = label_data, aes(x = id, y = Frequency + 10, label = Athlete, hjust = hjust), color = "black", fontface = "bold", alpha = 0.6, size = 2.5, angle = label_data$angle, inherit.aes = FALSE) +
# Add base line information
geom_segment(data = base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = "black", alpha = 0.8, size = 0.6, inherit.aes = FALSE) +
geom_text(data = base_data, aes(x = title, y = -18, label = Nationality), hjust = c(1, 1, 0, 0), colour = "black", alpha = 0.8, size = 4, fontface = "bold", inherit.aes = FALSE)
p
# Ensure data is cleaned and consistent
data <- data %>% filter(!is.na(Frequency))  # Remove NA values in Frequency
data <- data %>% arrange(Nationality)      # Arrange data for proper alignment
data$id <- seq(1, nrow(data))              # Update ID column
# Prepare label data
label_data <- data
number_of_bar <- nrow(label_data)
# Compute angle and hjust
angle <- 90 - 360 * (label_data$id - 0.5) / number_of_bar
label_data <- label_data %>%
mutate(
hjust = ifelse(angle < -90, 1, 0),
angle = ifelse(angle < -90, angle + 180, angle)
)
# Create the plot
p <- ggplot(data, aes(x = as.factor(id), y = Frequency, fill = Nationality)) +
geom_bar(stat = "identity", alpha = 0.5) +
ylim(-100, 120) +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1, 4), "cm")
) +
coord_polar() +
geom_text(
data = label_data,
aes(x = id, y = Frequency + 10, label = Athlete, hjust = hjust),
color = "black",
fontface = "bold",
alpha = 0.6,
size = 2.5,
angle = label_data$angle,
inherit.aes = FALSE
)
p
# Ensure data is cleaned and consistent
data <- data %>% filter(!is.na(Frequency))  # Remove NA values in Frequency
data <- data %>% arrange(Nationality)      # Arrange data for proper alignment
data$id <- seq(1, nrow(data))              # Update ID column
# Prepare label data
label_data <- data
number_of_bar <- nrow(label_data)
# Compute angle and hjust
angle <- 90 - 360 * (label_data$id - 0.5) / number_of_bar
label_data <- label_data %>%
mutate(
hjust = ifelse(angle < -90, 1, 0),
angle = ifelse(angle < -90, angle + 180, angle)
)
# Create the plot
p <- ggplot(data, aes(x = as.factor(id), y = Frequency, fill = Nationality)) +
geom_bar(stat = "identity", alpha = 0.5) +
ylim(-100, 120) +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1, 4), "cm")
) +
coord_polar() +
geom_text(
data = label_data,
aes(x = id, y = Frequency + 10, label = Athlete, hjust = hjust),
color = "black",
fontface = "bold",
alpha = 0.6,
size = 2.5,
angle = label_data$angle,
inherit.aes = FALSE
)
p
data
# Remove rows where Frequency is 1
data <- data %>% filter(Frequency > 1)
# Proceed with arranging and updating ID
data <- data %>% arrange(Nationality)
data$id <- seq(1, nrow(data))
# Ensure data is cleaned and consistent
data <- data %>% filter(!is.na(Frequency))  # Remove NA values in Frequency
data <- data %>% arrange(Nationality)      # Arrange data for proper alignment
data$id <- seq(1, nrow(data))              # Update ID column
# Prepare label data
label_data <- data
number_of_bar <- nrow(label_data)
# Compute angle and hjust
angle <- 90 - 360 * (label_data$id - 0.5) / number_of_bar
label_data <- label_data %>%
mutate(
hjust = ifelse(angle < -90, 1, 0),
angle = ifelse(angle < -90, angle + 180, angle)
)
# Create the plot
p <- ggplot(data, aes(x = as.factor(id), y = Frequency, fill = Nationality)) +
geom_bar(stat = "identity", alpha = 0.5) +
ylim(-100, 120) +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1, 4), "cm")
) +
coord_polar() +
geom_text(
data = label_data,
aes(x = id, y = Frequency + 10, label = Athlete, hjust = hjust),
color = "black",
fontface = "bold",
alpha = 0.6,
size = 2.5,
angle = label_data$angle,
inherit.aes = FALSE
)
p
# library
library(tidyverse)
# Example data (replace this with your actual winners_nationality data)
winners_nationality <- data.frame(
Athlete = c("Athlete1", "Athlete2", "Athlete3", "Athlete4", "Athlete5"),
Nationality = c("USA", "Kenya", "Kenya", "Ethiopia", "USA"),
Frequency = c(3, 5, 7, 2, 4)  # Replace with your actual Frequency data
)
# Set a number of 'empty bar' to add at the end of each group
empty_bar <- 3
to_add <- data.frame(matrix(NA, empty_bar * nlevels(winners_nationality$Nationality), ncol(winners_nationality)))
colnames(to_add) <- colnames(winners_nationality)
to_add$Nationality <- rep(levels(winners_nationality$Nationality), each = empty_bar)
# Remove rows where Frequency is 1
winners_nationality <- winners_nationality %>% filter(Frequency > 1)
# Combine the data and arrange it
data <- rbind(winners_nationality, to_add)
data <- data %>% arrange(Nationality)
data$id <- seq(1, nrow(data))
# Get the name and the y position of each label
label_data <- data
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id - 0.5) / number_of_bar  # Adjust the angle for label positioning
label_data$hjust <- ifelse(angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle + 180, angle)
# Prepare a data frame for base lines
base_data <- data %>%
group_by(Nationality) %>%
summarize(start = min(id), end = max(id) - empty_bar) %>%
rowwise() %>%
mutate(title = mean(c(start, end)))
# Prepare a data frame for grid (scales)
grid_data <- base_data
grid_data$end <- grid_data$end[c(nrow(grid_data), 1:nrow(grid_data) - 1)] + 1
grid_data$start <- grid_data$start - 1
grid_data <- grid_data[-1, ]
# Make the plot
p <- ggplot(data, aes(x = as.factor(id), y = Frequency, fill = Nationality)) +
geom_bar(aes(x = as.factor(id), y = Frequency, fill = Nationality), stat = "identity", alpha = 0.5) +
# Add 80/60/40/20 lines for grid
geom_segment(data = grid_data, aes(x = end, y = 80, xend = start, yend = 80), colour = "grey", alpha = 1, size = 0.3, inherit.aes = FALSE) +
geom_segment(data = grid_data, aes(x = end, y = 60, xend = start, yend = 60), colour = "grey", alpha = 1, size = 0.3, inherit.aes = FALSE) +
geom_segment(data = grid_data, aes(x = end, y = 40, xend = start, yend = 40), colour = "grey", alpha = 1, size = 0.3, inherit.aes = FALSE) +
geom_segment(data = grid_data, aes(x = end, y = 20, xend = start, yend = 20), colour = "grey", alpha = 1, size = 0.3, inherit.aes = FALSE) +
# Add text showing the value of each grid line
annotate("text", x = rep(max(data$id), 4), y = c(20, 40, 60, 80), label = c("20", "40", "60", "80"), color = "grey", size = 3, angle = 0, fontface = "bold", hjust = 1) +
ylim(-100, 120) +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1, 4), "cm")
) +
coord_polar() +
# Label for each segment
geom_text(data = label_data, aes(x = id, y = Frequency + 10, label = Athlete, hjust = hjust), color = "black", fontface = "bold", alpha = 0.6, size = 2.5, angle = label_data$angle, inherit.aes = FALSE) +
# Add base line information
geom_segment(data = base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = "black", alpha = 0.8, size = 0.6, inherit.aes = FALSE) +
geom_text(data = base_data, aes(x = title, y = -18, label = Nationality), hjust = c(1, 1, 0, 0), colour = "black", alpha = 0.8, size = 4, fontface = "bold", inherit.aes = FALSE)
# Display the plot
p
# library
library(tidyverse)
# Example data (replace this with your actual winners_nationality data)
winners_nationality <- data.frame(
Athlete = c("Athlete1", "Athlete2", "Athlete3", "Athlete4", "Athlete5"),
Nationality = c("USA", "Kenya", "Kenya", "Ethiopia", "USA"),
Frequency = c(3, 5, 7, 2, 4)  # Replace with your actual Frequency data
)
# Set a number of 'empty bar' to add at the end of each group
empty_bar <- 3
to_add <- data.frame(matrix(NA, empty_bar * nlevels(winners_nationality$Nationality), ncol(winners_nationality)))
colnames(to_add) <- colnames(winners_nationality)
to_add$Nationality <- rep(levels(winners_nationality$Nationality), each = empty_bar)
# Remove rows where Frequency is 1
winners_nationality <- winners_nationality %>% filter(Frequency > 1)
# Combine the data and arrange it
data <- rbind(winners_nationality, to_add)
data <- data %>% arrange(Nationality)
data$id <- seq(1, nrow(data))
# Get the name and the y position of each label
label_data <- data
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id - 0.5) / number_of_bar  # Adjust the angle for label positioning
label_data$hjust <- ifelse(angle < -90, 1, 0)  # Fix hjust to handle angle calculations correctly
label_data$angle <- ifelse(angle < -90, angle + 180, angle)
# Prepare a data frame for base lines
base_data <- data %>%
group_by(Nationality) %>%
summarize(start = min(id), end = max(id) - empty_bar) %>%
rowwise() %>%
mutate(title = mean(c(start, end)))
# Prepare a data frame for grid (scales)
grid_data <- base_data
grid_data$end <- grid_data$end[c(nrow(grid_data), 1:nrow(grid_data) - 1)] + 1
grid_data$start <- grid_data$start - 1
grid_data <- grid_data[-1, ]
# Make the plot
p <- ggplot(data, aes(x = as.factor(id), y = Frequency, fill = Nationality)) +
geom_bar(aes(x = as.factor(id), y = Frequency, fill = Nationality), stat = "identity", alpha = 0.5) +
# Add 80/60/40/20 lines for grid
geom_segment(data = grid_data, aes(x = end, y = 80, xend = start, yend = 80), colour = "grey", alpha = 1, size = 0.3, inherit.aes = FALSE) +
geom_segment(data = grid_data, aes(x = end, y = 60, xend = start, yend = 60), colour = "grey", alpha = 1, size = 0.3, inherit.aes = FALSE) +
geom_segment(data = grid_data, aes(x = end, y = 40, xend = start, yend = 40), colour = "grey", alpha = 1, size = 0.3, inherit.aes = FALSE) +
geom_segment(data = grid_data, aes(x = end, y = 20, xend = start, yend = 20), colour = "grey", alpha = 1, size = 0.3, inherit.aes = FALSE) +
# Add text showing the value of each grid line
annotate("text", x = rep(max(data$id), 4), y = c(20, 40, 60, 80), label = c("20", "40", "60", "80"), color = "grey", size = 3, angle = 0, fontface = "bold", hjust = 1) +
ylim(-100, 120) +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1, 4), "cm")
) +
coord_polar() +
# Label for each segment
geom_text(data = label_data, aes(x = id, y = Frequency + 10, label = Athlete, hjust = hjust), color = "black", fontface = "bold", alpha = 0.6, size = 2.5, angle = label_data$angle, inherit.aes = FALSE) +
# Add base line information
geom_segment(data = base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = "black", alpha = 0.8, size = 0.6, inherit.aes = FALSE) +
geom_text(data = base_data, aes(x = title, y = -18, label = Nationality), hjust = c(1, 1, 0, 0), colour = "black", alpha = 0.8, size = 4, fontface = "bold", inherit.aes = FALSE)
# Display the plot
p
# library
library(tidyverse)
# Example data (replace this with your actual winners_nationality data)
winners_nationality <- data.frame(
Athlete = c("Athlete1", "Athlete2", "Athlete3", "Athlete4", "Athlete5"),
Nationality = c("USA", "Kenya", "Kenya", "Ethiopia", "USA"),
Frequency = c(3, 5, 7, 2, 4)  # Replace with your actual Frequency data
)
# Set a number of 'empty bar' to add at the end of each group
empty_bar <- 3
to_add <- data.frame(matrix(NA, empty_bar * nlevels(winners_nationality$Nationality), ncol(winners_nationality)))
colnames(to_add) <- colnames(winners_nationality)
to_add$Nationality <- rep(levels(winners_nationality$Nationality), each = empty_bar)
# Remove rows where Frequency is 1
winners_nationality <- winners_nationality %>% filter(Frequency > 1)
# Combine the data and arrange it
data <- rbind(winners_nationality, to_add)
data <- data %>% arrange(Nationality)
data$id <- seq(1, nrow(data))
# Get the name and the y position of each label
label_data <- data
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id - 0.5) / number_of_bar  # Adjust the angle for label positioning
# Compute hjust based on angle
label_data$hjust <- ifelse(angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle + 180, angle)
# Prepare a data frame for base lines
base_data <- data %>%
group_by(Nationality) %>%
summarize(start = min(id), end = max(id) - empty_bar) %>%
rowwise() %>%
mutate(title = mean(c(start, end)))
# Prepare a data frame for grid (scales)
grid_data <- base_data
grid_data$end <- grid_data$end[c(nrow(grid_data), 1:nrow(grid_data) - 1)] + 1
grid_data$start <- grid_data$start - 1
grid_data <- grid_data[-1, ]
# Make the plot
p <- ggplot(data, aes(x = as.factor(id), y = Frequency, fill = Nationality)) +
geom_bar(stat = "identity", alpha = 0.5) +
# Add 80/60/40/20 lines for grid
geom_segment(data = grid_data, aes(x = end, y = 80, xend = start, yend = 80), colour = "grey", alpha = 1, size = 0.3) +
geom_segment(data = grid_data, aes(x = end, y = 60, xend = start, yend = 60), colour = "grey", alpha = 1, size = 0.3) +
geom_segment(data = grid_data, aes(x = end, y = 40, xend = start, yend = 40), colour = "grey", alpha = 1, size = 0.3) +
geom_segment(data = grid_data, aes(x = end, y = 20, xend = start, yend = 20), colour = "grey", alpha = 1, size = 0.3) +
# Add text showing the value of each grid line
annotate("text", x = rep(max(data$id), 4), y = c(20, 40, 60, 80), label = c("20", "40", "60", "80"), color = "grey", size = 3, angle = 0, fontface = "bold", hjust = 1) +
ylim(-100, 120) +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1, 4), "cm")
) +
coord_polar() +
# Label for each segment
geom_text(data = label_data, aes(x = id, y = Frequency + 10, label = Athlete, hjust = hjust), color = "black", fontface = "bold", alpha = 0.6, size = 2.5, angle = label_data$angle) +
# Add base line information
geom_segment(data = base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = "black", alpha = 0.8, size = 0.6) +
geom_text(data = base_data, aes(x = title, y = -18, label = Nationality), hjust = c(1, 1, 0, 0), colour = "black", alpha = 0.8, size = 4, fontface = "bold")
# Display the plot
p
winners_count <- data.frame(table(winners$Athlete))
names(winners_count) <- c("Athlete","Frequency")
winners_nationality <- unique(left_join(winners_count, winners[,c("Athlete","Nationality")], by="Athlete"))
ggplot(winners_nationality[winners_count$Frequency > 1,], aes(x=Athlete, y=Frequency)) +
geom_segment( aes(x=Athlete, xend=Athlete, y=0, yend=Frequency), color="skyblue") +
geom_point( color="blue", size=4, alpha=0.6) +
theme_light() +
coord_flip() +
theme(
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
winners_nationality[winners_nationality$Frequency > 1,] %>%
arrange(Nationality) %>%    # First sort by val. This sort the dataframe but NOT the     factor levels
mutate(name=factor(Athlete, levels=Athlete)) %>%   # This trick update the factor levels
ggplot( aes(x=name, y=Frequency, color=Nationality)) +
geom_segment( aes(x=name, xend=name, y=Frequency,yend=0)) +
geom_point( size=4) +
coord_flip() +
theme_bw() +
xlab("Names of Winners")
winners_count <- data.frame(table(winners$Athlete))
names(winners_count) <- c("Athlete","Frequency")
winners_nationality <- unique(left_join(winners_count, winners[,c("Athlete","Nationality")], by="Athlete"))
ggplot(winners_nationality[winners_count$Frequency > 1,], aes(x=Athlete, y=Frequency)) +
geom_segment( aes(x=Athlete, xend=Athlete, y=0, yend=Frequency), color="skyblue") +
geom_point( color="blue", size=4, alpha=0.6) +
theme_light() +
coord_flip() +
theme(
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.ticks.y = element_blank()
)
winners_nationality[winners_nationality$Frequency > 1,] %>%
arrange(Nationality) %>%    # First sort by val. This sort the dataframe but NOT the     factor levels
mutate(name=factor(Athlete, levels=Athlete)) %>%   # This trick update the factor levels
ggplot( aes(x=name, y=Frequency, color=Nationality)) +
geom_segment( aes(x=name, xend=name, y=Frequency,yend=0)) +
geom_point( size=4) +
coord_flip() +
theme_bw() +
xlab("Names of Winners")
setwd("D:/Trent University/AMOD 5240 - Statistical Aspect of Modelling/Project")
#| fig-width: 10
#| fig-height: 7
winners_count <- data.frame(table(winners$Athlete))
names(winners_count) <- c("Athlete","Frequency")
winners_nationality <- unique(left_join(winners_count, winners[,c("Athlete","Nationality")], by="Athlete"))
# ggplot(winners_nationality[winners_count$Frequency > 1,], aes(x=Athlete, y=Frequency)) +
#   geom_segment( aes(x=Athlete, xend=Athlete, y=0, yend=Frequency), color="skyblue") +
#   geom_point( color="blue", size=4, alpha=0.6) +
#   theme_light() +
#   coord_flip() +
#   theme(
#     panel.grid.major.y = element_blank(),
#     panel.border = element_blank(),
#     axis.ticks.y = element_blank()
#   )
winners_nationality[winners_nationality$Frequency > 1,] %>%
arrange(Nationality) %>%    # First sort by val. This sort the dataframe but NOT the     factor levels
mutate(name=factor(Athlete, levels=Athlete)) %>%   # This trick update the factor levels
ggplot( aes(x=name, y=Frequency, color=Nationality)) +
geom_segment( aes(x=name, xend=name, y=Frequency,yend=0)) +
geom_point( size=4) +
coord_flip() +
theme_bw() +
xlab("Names of Winners")
mday(london_marathon$Date)
table(mday(london_marathon$Date))
month(london_marathon$Date)
table(month(london_marathon$Date))
table(month(london_marathon$Date), london_marathon$Raised)
data.frame(table(month(london_marathon$Date), london_marathon$Raised))
table(mday(london_marathon$Date), london_marathon$Raised)
data.frame(table(mday(london_marathon$Date), london_marathon$Raised))
raised_mday <- data.frame(table(mday(london_marathon$Date), london_marathon$Raised))
raised_mday <- raised_mday[raised_mday$Freq>1,]
barplot(raised_mday$Var1,raised_mday$Var2)
raised_mday
raised_mday <- data.frame(table(mday(london_marathon$Date), london_marathon$Raised))
raised_mday
raised_mday <- raised_mday[raised_mday$Freq>=1,]
raised_mday
barplot(raised_mday$Var1,raised_mday$Var2)
raised_mday <- raised_mday[raised_mday$Var2 > 0,]
str(raised_mday)
raised_mday$Var2 <- as.numeric(raised_mday$Var2)
str(raised_mday)
raised_mday
raised_mday <- data.frame(table(mday(london_marathon$Date), london_marathon$Raised))
str(raised_mday)
raised_mday <- data.frame(table(mday(london_marathon$Date), london_marathon$Raised))
str(raised_mday)
raised_mday$Var2 <- as.numeric(as.character(raised_mday$Var2))
str(raised_mday)
View(raised_mday)
View(raised_mday)
raised_mday %>% filter(Var2 > 0 | Freq > 0)
raised_mday %>% filter(Var2 > 0 & Freq > 0)
raised_mday %>%
filter(Var2 > 0 & Freq > 0) %>%
ggplot(aes(x=Var1, y=Var2)) %>%
geom_bar()
raised_mday %>%
filter(Var2 > 0 & Freq > 0) %>%
ggplot(aes(x=Var1, y=Var2)) +
geom_bar()
raised_mday %>%
filter(Var2 > 0 & Freq > 0) %>%
ggplot(aes(x = Var1, y = Var2)) +
geom_col()
raised_mday %>%
filter(Var2 > 0 & Freq > 0)
raised_mday %>%
filter(Var2 > 0 & Freq > 0) %>%
ggplot(aes(x = Var1, y = Var2)) +
geom_col()
View(raised_mday %>%
filter(Var2 > 0 & Freq > 0))
name(raised_mday) <- c("Day","Amount_Raised","Frequency")
names(raised_mday) <- c("Day","Amount_Raised","Frequency")
raised_mday %>%
filter(Amount_Raised > 0 & Frequency > 0) %>%
ggplot(aes(x=Var1, y=Var2)) +
geom_bar()
raised_mday %>%
filter(Amount_Raised > 0 & Frequency > 0) %>%
ggplot(aes(x=Var1, y=Var2)) +
geom_col()
raised_mday %>%
filter(Amount_Raised > 0 & Frequency > 0) %>%
ggplot(aes(x=Amount_Raised, y=Frequency)) +
geom_col()
raised_mday %>%
filter(Amount_Raised > 0 & Frequency > 0) %>%
ggplot(aes(x=Day, y=Amount_Raised)) +
geom_col()
raised_mday <- data.frame(table(mday(london_marathon$Date), london_marathon$Raised))
str(raised_mday)
raised_mday$Var2 <- as.numeric(as.character(raised_mday$Var2))
names(raised_mday) <- c("Day","Amount_Raised","Frequency")
raised_mday %>%
filter(Amount_Raised > 0 & Frequency > 0) %>%
ggplot(aes(x=Day, y=Amount_Raised)) +
geom_col() +
theme_minimal()
View(raised_mday)
View(raised_mday %>%
filter(Amount_Raised > 0 & Frequency > 0))
ggplot(data, aes(x = Day, y = Amount_Raised, size = Frequency)) +
geom_point(color = "darkorange", alpha = 0.7) +
labs(title = "Amount Raised vs Day with Frequency",
x = "Day of the Month",
y = "Amount Raised",
size = "Frequency")
ggplot(raised_mday, aes(x = Day, y = Amount_Raised, size = Frequency)) +
geom_point(color = "darkorange", alpha = 0.7) +
labs(title = "Amount Raised vs Day with Frequency",
x = "Day of the Month",
y = "Amount Raised",
size = "Frequency")
raised_mday<- raised_mday %>%
filter(Amount_Raised > 0 & Frequency > 0)
ggplot(raised_mday, aes(x = Day, y = Amount_Raised, size = Frequency)) +
geom_point(color = "darkorange", alpha = 0.7) +
labs(title = "Amount Raised vs Day with Frequency",
x = "Day of the Month",
y = "Amount Raised",
size = "Frequency")
