labs(x = "Sample Proportion", y = "Frequency")spam <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-08-15/spam.csv')
spam <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-08-15/spam.csv')
View(spam)
table(spam$yesno)
boxplot(spam$dollar)
summary(spam)
plot(density(spam$crl.tot))
(spam$crl.tot)
hist(spam$crl.tot)
boxplot(spam$crl.tot)
boxplot(spam$dollar)
boxplot(spam$bang)
boxplot(spam$money)
boxplot(spam$n000)
boxplot(spam$make)
boxplot(spam$yesno)
lm(yesno ~ crl.tot + dollar + bang + money + n000 + make,spam)
spam$yesno.factor <- factor(spam$yesno)
lm(yesno.factor ~ crl.tot + dollar + bang + money + n000 + make,spam)
names(spam)
# Fit logistic regression model
model <- glm(yesno ~ crl.tot + dollar + bang + money + n000 + make,
data = spam,
family = binomial)
# Fit logistic regression model
model <- glm(yesno.factor ~ crl.tot + dollar + bang + money + n000 + make,
data = spam,
family = binomial)
# View model summary
summary(model)
# Predict probabilities
predicted_probabilities <- predict(model, type = "response")
# Convert probabilities to binary class predictions
predicted_class <- ifelse(predicted_probabilities > 0.5, 1, 0)
# Create a confusion matrix
confusion_matrix <- table(Predicted = predicted_class, Actual = data$yesno)
# Create a confusion matrix
confusion_matrix <- table(Predicted = predicted_class, Actual = data$yesno.factor)
# Create a confusion matrix
confusion_matrix <- table(Predicted = predicted_class, Actual = data$yesno.factor)
# Create a confusion matrix
confusion_matrix <- table(Predicted = predicted_class, Actual = data$yesno)
# Fit logistic regression model
model <- glm(yesno ~ crl.tot + dollar + bang + money + n000 + make,
data = data,
family = binomial)
# Fit logistic regression model
model <- glm(yesno ~ crl.tot + dollar + bang + money + n000 + make,
data = spam,
family = binomial)
# Fit logistic regression model
model <- glm(yesno.factor ~ crl.tot + dollar + bang + money + n000 + make,
data = spam,
family = binomial)
# Predict probabilities
predicted_probabilities <- predict(model, type = "response")
# Convert probabilities to binary class predictions
predicted_class <- ifelse(predicted_probabilities > 0.5, 1, 0)
# Create a confusion matrix
confusion_matrix <- table(Predicted = predicted_class, Actual = data$yesno)
# Fit logistic regression model
model <- glm(yesno.factor ~ crl.tot + dollar + bang + money + n000 + make,
data = spam,
family = binomial)
# Predict probabilities
predicted_probabilities <- predict(model, type = "response")
# Convert probabilities to binary class predictions
predicted_class <- ifelse(predicted_probabilities > 0.5, 1, 0)
# Create a confusion matrix
confusion_matrix <- table(Predicted = predicted_class, Actual = spam$yesno.factor)
# Calculate accuracy
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
print(accuracy)
olympics <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-08-06/olympics.csv')
View(olympics)
colSums(olympics)
colSums(olympics %>% is.na())
confusion_matrix
scurvy <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-07-25/scurvy.csv')
View(scurvy)
library(ggplot2)
ggplot(spam, aes(x = crl.tot)) +
geom_density(fill = "blue", alpha = 0.5) +
labs(title = "Density Plot of crl.tot", x = "crl.tot", y = "Density") +
theme_minimal()
ggplot(spam, aes(x = crl.tot, y = dollar)) +
geom_density_2d(fill = "blue", alpha = 0.5) +
labs(title = "Density Plot of crl.tot", x = "crl.tot", y = "Density") +
theme_minimal()
ggplot(spam, aes(x = crl.tot, y = dollar)) +
geom_density_2d_filled(alpha = 0.5) +
labs(title = "Filled 2D Density Plot of crl.tot and dollar",
x = "crl.tot", y = "dollar") +
theme_minimal()
ggplot(spam, aes(x = crl.tot, y = make)) +
geom_density_2d_filled(alpha = 0.5) +
labs(title = "Filled 2D Density Plot of crl.tot and dollar",
x = "crl.tot", y = "dollar") +
theme_minimal()
ggplot(spam, aes(x = crl.tot, y = make)) +
geom_density_2d_filled(alpha = 0.5) +
labs(title = "Filled 2D Density Plot of crl.tot and dollar",
x = "crl.tot", y = "dollar") +
theme_minimal()
ggpairs(spam)
install.packages("GGally")
library(GGally)
ggpairs(spam)
olympics
View(olympics)
table(olympics$medal)
dim(olympics)
rowSums(table(olympics$medal))
table(olympics[,c("event","medal")])
table(olympics[,c("sport","medal")])
distinct(olympics$team)
unique(olympics$team)
unique(olympics$noc)
unique(olympics$name)
colSums(is.na(olympics))
rowSums(is.na(olympics))
dim(olympics[rowSums(is.na(olympics)) > 1,])
dim(olympics[rowSums(is.na(olympics)) < 1,])
dim(olympics[rowSums(is.na(olympics)) <= 1,])
dim(olymics)[1] / dim(olympics[rowSums(is.na(olympics)) <= 1,])[1]
dim(olympics)[1] / dim(olympics[rowSums(is.na(olympics)) <= 1,])[1]
dim(olympics[rowSums(is.na(olympics)) <= 1,])[1] / dim(olympics)[1]
dim(olympics[rowSums(is.na(olympics)) > 1,])[1] / dim(olympics)[1]
dim(olympics)
olympics[is.na(olympics$age),name]
n <- 250
x <- dim(insurance[insurance$Insurance == "Private"])[1]
x
n <- 250
x <- dim(insurance[insurance$Insurance == "Private",])[1]
x
insurance$Insurance
n <- 250
x <- dim(insurance[insurance$Insurance == "Private Insurance",])[1]
x
n <- 250
x <- dim(insurance[insurance$Insurance == "Private Insurance",])[1]
phat_ht3 <- x / n
ci <- 0.91
obs_insurance
table(obs_insurance)
obs_insurance
sampling_dist <- obs_insurance %>%
specify(response = type, success = "private") %>%
generate(rep = 5000, type = "bootstrap") %>%
calculate(stat = "prop")
ci_insurance <- sampling_dist %>%
get_ci(level=ci)
ci_insurance
sampling_dist <- obs_insurance %>%
specify(response = type, success = "private") %>%
generate(rep = 5000, type = "bootstrap") %>%
calculate(stat = "prop")
ci_insurance <- sampling_dist %>%
get_ci(level=ci)
ci_insurance
sampling_dist %>%
visualize() +
shade_ci(endpoints = ci_insurance) +
labs(x = "Sample Proportion", y = "Frequency")
olympics[is.na(olympics$age),namewinners <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-04-25/winners.csv')
london_marathon <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-04-25/london_marathon.csv')
winners <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-04-25/winners.csv')
london_marathon <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-04-25/london_marathon.csv')
dim(winners)
dim(london_marathon)
colony <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-01-11/colony.csv')
stressor <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-01-11/stressor.csv')
dim(colony)
dim(stressor)
library(rvest)
install.packages("rvest")
install.packages("tidyverse")
install.packages("fs")
library(rvest)
library(tidyverse)
library(fs)
# download site
url <- "https://usda.library.cornell.edu/concern/publications/rn301137d?locale=en"
# raw html
raw_html <- read_html(url)
# all the download urls for zip files
all_urls <- raw_html %>%
html_elements("#content-wrapper > div.row.p-content > div.col-sm-7 > table") %>%
html_elements("a") %>%
html_attr("href") %>%
str_subset(".zip")
# download to correct directory
download.file(all_urls, destfile = paste0("2022/2022-01-11/", basename(all_urls)))
# unzip into their respective folders
walk(basename(all_urls), ~ unzip(
paste0("2022/2022-01-11/", .x),
exdir = paste0("2022/2022-01-11/bee-", str_sub(.x, -6, -5))
))
#  Clean Colony data ------------------------------------------------------
clean_bee_colonies <- function(file){
col_labs <- c("state", "colony_n", "colony_max", "colony_lost",
"colony_lost_pct", "colony_added", "colony_reno", "colony_reno_pct")
raw_df <- read_csv(file,  skip = 2, col_names = FALSE)
date_rng <- read_csv(file, skip = 0, col_names = FALSE) %>%
slice(2) %>%
pull(X3) %>%
str_replace(" [5-6]/$", "") %>%
word(-2, -1)
clean_df <- suppressWarnings(raw_df %>%
filter(!is.na(X4))  %>%
filter(X2 == "d") %>%
select(X3:X10) %>%
set_names(nm = col_labs) %>%
mutate(date_range = date_rng, .before = state) %>%
separate(date_range, into = c("months", "year"), sep = " ") %>%
select(year, months, state, everything()) %>%
mutate(across(contains("colony"), as.integer)))
clean_df
}
# Clean stress data -------------------------------------------------------
clean_bee_stress <- function(file){
col_labs <- c("state", "colony_n", "colony_max", "colony_lost",
"colony_lost_pct", "colony_added", "colony_reno", "colony_reno_pct")
raw_df <- read_csv(file,  skip = 4, col_names = FALSE)
date_rng <- read_csv(file, skip = 0, col_names = FALSE) %>%
slice(2) %>%
pull(X3) %>%
str_replace(" [5-6]/$", "") %>%
word(-2, -1)
stress_nm <- c("state", "Varroa mites", "Other pests/parasites", "Disesases",
"Pesticides", "Other", "Unknown")
clean_df <- suppressWarnings(raw_df %>%
filter(!is.na(X4))  %>%
filter(X2 == "d") %>%
select(X3:X9) %>%
set_names(nm = stress_nm) %>%
pivot_longer(cols = -state, names_to = "stressor", values_to = "stress_pct") %>%
mutate(date_range = date_rng, .before = state) %>%
separate(date_range, into = c("months", "year"), sep = " ") %>%
select(year, months, state, everything()) %>%
mutate(stress_pct = as.double(stress_pct)))
clean_df
}
# Get the file index ------------------------------------------------------
all_html_index <- dir_ls("data/2022/2022-01-11", recurse = TRUE, glob = "*htm") %>%
str_subset("bee-") %>%
str_subset("index")
dim(winners)
dim(london_marathon)
View(Winners)
View(winners)
View(london_marathon)
View(colony)
View(stressor)
set.seed(2323)
null_dist %>%
visualize() +
shade_p_value(obs_stat = phat_ht2_infer, direction = "less") +
labs(x = "Sample Proportion", y = "Frequency")
install.packages("tidytuesdayR")
tuesdata <- tidytuesdayR::tt_load('2022-01-11')
tuesdata <- tidytuesdayR::tt_load(2022, week = 2)
colony <- tuesdata$colony
stressor <- tuesdata$stressor
set.seed(2323)
null_dist %>%
visualize() +
shade_p_value(obs_stat = phat_ht2_infer, direction = "less") +
labs(x = "Sample Proportion", y = "Frequency")
colSums(colony)
colSums(is.na(colony))
dim(colory)
dim(colony)
dim(stressor)
set.seed(2323)
null_dist %>%
visualize() +
shade_p_value(obs_stat = phat_ht2_infer, direction = "less") +
labs(x = "Sample Proportion", y = "Frequency")
table(stressor$stressor)
london_marathon
Assignment_3.log
#| message: false
#| warning: false
#| label: fig-accepted-applicants-raised-plot
#| fig-cap: "Scatter plot for total Applicants vs. Accepted applications and funds raised by each race"
options(scipen = 999)
# Accepted participants vs finishers by amount raised
london_marathon %>%
filter(Raised > 0 ) %>%
ggplot(aes(x=Applicants, y = Accepted, size = Raised)) +
geom_point(alpha = 0.7) +
scale_size_continuous(name = "Raised (in Millions)")+
labs(title="Applications by Accepted counts with raised amount") +
theme_bw()
#| message: false
#| warning: false
#| label: fig-accepted-applicants-raised-plot
#| fig-cap: "Scatter plot for total Applicants vs. Accepted applications and funds raised by each race"
options(scipen = 999)
# Accepted participants vs finishers by amount raised
london_marathon %>%
filter(Raised > 0 ) %>%
ggplot(aes(x=Applicants, y = Accepted, size = Raised)) +
geom_point(alpha = 0.7) +
scale_size_continuous(name = "Raised (in Millions)")+
labs(title="Applications by Accepted counts with raised amount") +
theme_bw()
#| message: FALSE
#| warnings: FALSE
#libraries
library(lubridate)
library(dplyr)
library(ggplot2)
library(GGally)
#| message: false
#| warning: false
#| label: fig-accepted-applicants-raised-plot
#| fig-cap: "Scatter plot for total Applicants vs. Accepted applications and funds raised by each race"
options(scipen = 999)
# Accepted participants vs finishers by amount raised
london_marathon %>%
filter(Raised > 0 ) %>%
ggplot(aes(x=Applicants, y = Accepted, size = Raised)) +
geom_point(alpha = 0.7) +
scale_size_continuous(name = "Raised (in Millions)")+
labs(title="Applications by Accepted counts with raised amount") +
theme_bw()
london_marathon %>%
filter(Raised > 0 ) %>%
ggplot(aes(x=Starters, y = Finishers, size = Raised)) +
geom_point(alpha = 0.7) +
scale_size_continuous(name = "Raised (in Millions)")+
labs(title="Applications by Accepted counts with raised amount") +
theme_bw()
# Year vs Time by Category
winners %>%
ggplot(aes(x = Year, y = Time.Seconds / 60, color = Category)) +
geom_point() +
geom_line() +
labs(
title = "Finish time (in minutes) by years in each Category",
x = "Year",
y = "Finish time in minutes"
) +
theme_bw()
london_marathon[,c("Applicants","Accepted","Starters","Finishers","Raised")] %>%
# filter(Raised > 0) %>%
ggpairs() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # chat gpt helped me
# Year vs Time by Category
winners %>%
ggplot(aes(x = Year, y = Time.Seconds / 60, color = Category)) +
geom_point() +
geom_line() +
labs(
title = "Finish time (in minutes) by years in each Category",
x = "Year",
y = "Finish time in minutes"
) +
theme_bw()
winners$Time.Seconds <- period_to_seconds(hms(winners$Time))
# str(winners)
# Factoring the variables
winners$Category <- factor(winners$Category)
winners$Athlete <- factor(winners$Athlete)
winners$Nationality <- factor(winners$Nationality)
# str(london_marathon)
# Handling the NA in Raised
london_marathon$Raised[is.na(london_marathon$Raised)] = 0
london_marathon <- london_marathon[rowSums(is.na(london_marathon)) <= 2,]
london_marathon[london_marathon$Starters == 77,]
# Year vs Time by Category
winners %>%
ggplot(aes(x = Year, y = Time.Seconds / 60, color = Category)) +
geom_point() +
geom_line() +
labs(
title = "Finish time (in minutes) by years in each Category",
x = "Year",
y = "Finish time in minutes"
) +
theme_bw()
setwd("D:/Trent University/AMOD 5240 - Statistical Aspect of Modelling/Project")
#| message: false
#| warning: false
#| label: fig-accepted-applicants-raised-plot
#| fig-cap: "Plots showing the relationship of Applicants - Accepted and Finishers - Starters where there is amount of charity is Raised"
#| fig-subcap:
#|   - "Scatterplot between applicants in the marathon and accepted participants where charity is raised"
#|   - "Scatterplot between starters and finishers of the marathons where charity is raised"
#| layout-ncol: 2
#| fig-align: center
options(scipen = 999)
# Accepted participants vs finishers by amount raised
london_marathon %>%
filter(Raised > 0 ) %>%
ggplot(aes(x=Applicants, y = Accepted, size = Raised)) +
geom_point(alpha = 0.7) +
scale_size_continuous(name = "Raised (in Millions)")+
labs(title="Applications by Accepted counts with raised amount") +
theme_bw()
london_marathon %>%
filter(Raised > 0 ) %>%
ggplot(aes(x=Starters, y = Finishers, size = Raised)) +
geom_point(alpha = 0.7) +
scale_size_continuous(name = "Raised (in Millions)")+
labs(title="Applications by Accepted counts with raised amount") +
theme_bw()
#| echo: true
#| eval: false
#| ref.label: !expr knitr::all_labels()
#| message: FALSE
#| warnings: FALSE
#libraries
library(lubridate)
library(dplyr)
library(ggplot2)
library(GGally)
#| message: FALSE
#| warnings: FALSE
# Loading data
tuesdata <- tidytuesdayR::tt_load('2023-04-25')
tuesdata <- tidytuesdayR::tt_load(2023, week = 17)
winners <- tuesdata$winners
london_marathon <- tuesdata$london_marathon
# Convert the time from hour:min:seconds to seconds
winners$Time.Seconds <- period_to_seconds(hms(winners$Time))
# Factoring the variables
winners$Category <- factor(winners$Category)
winners$Athlete <- factor(winners$Athlete)
winners$Nationality <- factor(winners$Nationality)
# Handling the NA in Raised
london_marathon$Raised[is.na(london_marathon$Raised)] = 0
london_marathon <- london_marathon[rowSums(is.na(london_marathon)) <= 2,]
summary(winners)
summary(london_marathon)
# Subset the dataframe for starters = 77
london_marathon[london_marathon$Starters == 77,]
#| message: false
#| warning: false
#| label: fig-accepted-applicants-starter-finishers-raised-plot
#| fig-cap: "Plots showing the relationship of Applicants - Accepted and Finishers - Starters where there is amount of charity is Raised"
#| fig-subcap:
#|   - "Applicants and Accepted individuals"
#|   - "Starters and Finishers of marathon"
#| layout-ncol: 2
#| fig-align: center
# Option ot print values without scientific notation
options(scipen = 999)
# Applicants vs Accepted participants by amount raised
london_marathon %>%
filter(Raised > 0 ) %>%
ggplot(aes(x=Applicants, y = Accepted, size = Raised)) +
geom_point(alpha = 0.7) +
scale_size_continuous(name = "Raised (in Millions)")+
labs(title="Applications by Accepted counts with raised amount") +
theme_bw()
# Starters and finishers by amount raised
london_marathon %>%
filter(Raised > 0 ) %>%
ggplot(aes(x=Starters, y = Finishers, size = Raised)) +
geom_point(alpha = 0.7) +
scale_size_continuous(name = "Raised (in Millions)")+
labs(title="Applications by Accepted counts with raised amount") +
theme_bw()
#| message: false
#| warning: false
#| label: pair-plot
#| fig-cap: "Pair plot between applicants, accepted participants, starters, finishers, and charity amount raised from the marathon"
# ggpairs plot
london_marathon[,c("Applicants","Accepted","Starters","Finishers","Raised")] %>%
filter(Raised > 0) %>%
ggpairs() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # chat gpt helped me
#| message: false
#| warning: false
#| label: time-series-plot
#| fig-cap: "Plot shows the finishing time of each category in each year"
# Year vs Time by Category
winners %>%
ggplot(aes(x = Year, y = Time.Seconds / 60, color = Category)) +
geom_point() +
geom_line() +
labs(
title = "Finish time (in minutes) by years in each Category",
x = "Year",
y = "Finish time in minutes"
) +
theme_bw()
#| fig-width: 10
#| fig-height: 7
#| label: grouping-data-nationality
winners_count <- data.frame(table(winners$Athlete))
names(winners_count) <- c("Athlete","Frequency")
#
winners_nationality <- unique(left_join(winners_count,
winners[,c("Athlete","Nationality")],
by="Athlete"))
#| message: false
#| warning: false
#| label: nationality-total-winnings
#| fig-cap: "The horizontal barplot show the total winnings of the country in descending order"
grouped_nationality <- winners_nationality %>%
group_by(Nationality) %>%
summarise(Total_winnings = sum(Frequency))
grouped_nationality %>%
ggplot(aes(x=reorder(Nationality,Total_winnings), y=Total_winnings)) +
geom_bar(stat="identity",fill="steelblue") +
labs(title="Total Winnings by Country", x = "Country", y = "Total Winnings")+
coord_flip()
